
@{
    ViewBag.Title = "Index";
    Layout        = "~/Views/Shared/_LayoutGameDev.cshtml";
}

<canvas id="racing-canvas" width="800" height="600"></canvas>

@section Scripts {
    <script type="text/javascript">
        var carPic       = document.createElement("img");
        var carPicLoaded = false;

        var racingCanvas;
        var canvasContext;

        // canvas dimensions
        var canvasWidth  = 800;
        var canvasHeigth = 600;

        // car
        var carX     = canvasWidth / 2;
        var carY     = canvasHeigth / 2;
        var carSpeed = 0;
        var carAng   = 0;

        const GROUNDSPEED_DECAY_MLT = 0.94;
        const DRIVE_POWER           = 0.5;
        const REVERSE_POWER         = 0.2;
        const TURN_RATE             = 0.03;

        // mouse 
        var mouseX = 0;
        var mouseY = 0;

        // track
        const TRACK_W    = 40;
        const TRACK_H    = 40;
        const TRACK_COLS = 20;
        const TRACK_ROWS = 15;
        const TRACK_GAP  = 5;

        // keys
        const KEY_LEFT_ARROW  = 37;
        const KEY_UP_ARROW    = 38;
        const KEY_RIGTH_ARROW = 39;
        const KEY_DOWN_ARROW  = 40;

        var keyHeld_Gas       = false;
        var keyHeld_Reverse   = false;
        var keyHeld_TurnLeft  = false;
        var keyHeld_TurnRight = false;

        //var trackGrid = new Array(TRACK_ROWS);
        var trackGrid = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                         [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
                         [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1],
                         [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1],
                         [1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1],
                         [1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1],
                         [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],
                         [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],
                         [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],
                         [1, 0, 2, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1],
                         [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1],
                         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            ];

        const TRACK_ROAD         = 0;
        const TRACK_WALL         = 1;
        const TRACK_PLAYER_START = 2;

        $(function () {
            racingCanvas  = $("#racing-canvas");
            canvasContext = racingCanvas[0].getContext('2d');

            canvasWidth  = racingCanvas.width();
            canvasHeigth = racingCanvas.height();

            // draw multiple time: simulate movement
            var framesPerSecond = 60;
            setInterval(callCanvasFunctions, 1000 / framesPerSecond);

            // add mouse events
            racingCanvas.mousemove(function (evt) {
                var mousePos = calculateMousePos(evt);
                // cheat/hack to test car in any position
                //carX = mouseX;
                //carY = mouseY;
                //carSpeedX = 4;
                //carSpeedY = -4;
            });

            document.addEventListener('keydown', keyPressed);
            document.addEventListener('keyup', keyReleased);

            // import picture
            carPic.onload = function () {
                carPicLoaded = true;
            };
            carPic.src = "/Content/racingGame/car2.png";

            // reset tracks
            carReset();
        });

        function keyPressed(evt) {
            // console.log("Key pressed" + evt.keyCode);
            if (evt.keyCode == KEY_LEFT_ARROW) {
                //carAng -= 0.5;
                keyHeld_TurnLeft = true;                
            }

            if (evt.keyCode == KEY_RIGTH_ARROW) {
                //carAng += 0.5;
                keyHeld_TurnRight = true;                
            }

            if (evt.keyCode == KEY_UP_ARROW) {
                //carSpeed += 0.5;
                keyHeld_Gas = true;                
            }

            if (evt.keyCode == KEY_DOWN_ARROW) {
                //carSpeed -= 0.5;
                keyHeld_Reverse = true;
            }

            if (evt.keyCode == KEY_LEFT_ARROW
                || evt.keyCode == KEY_RIGTH_ARROW
                || evt.keyCode == KEY_UP_ARROW
                || evt.keyCode == KEY_DOWN_ARROW) {
                evt.preventDefault();
            }            
        }

        function keyReleased(evt) {
            //console.log("Key released" + evt.keyCode);
            if (evt.keyCode == KEY_LEFT_ARROW) {
                keyHeld_TurnLeft = false;
            }

            if (evt.keyCode == KEY_RIGTH_ARROW) {
                keyHeld_TurnRight = false;
            }

            if (evt.keyCode == KEY_UP_ARROW) {
                keyHeld_Gas = false;
            }

            if (evt.keyCode == KEY_DOWN_ARROW) {
                keyHeld_Reverse = false;
            }
        }

        function calculateMousePos(evt) {
            var rect = racingCanvas[0].getBoundingClientRect();
            var root = document.documentElement;
            mouseX = evt.clientX - rect.left - root.scrollLeft;
            mouseY = evt.clientY - rect.top - root.scrollTop;
            return {
                x: mouseX,
                y: mouseY
            };
        }

        function callCanvasFunctions() {
            moveInCanvas();
            drawInCanvas();
        }

        function carReset() {
            for (var rowIdx = 0; rowIdx < TRACK_ROWS; rowIdx++) {
                for (var colIdX = 0; colIdX < TRACK_COLS; colIdX++) {
                    if (trackGrid[rowIdx][colIdX] == TRACK_PLAYER_START) {
                        trackGrid[rowIdx][colIdX] = TRACK_ROAD;
                        
                        carAng = -Math.PI / 2;

                        // car position + center car
                        carX = TRACK_W * colIdX + (TRACK_W / 2);
                        carY = TRACK_H * rowIdx + (TRACK_H / 2);
                        return;
                    } // end of is this car start place
                } // end of for each locating car start
            }
        }

        function moveInCanvas() {
            carMove();

            carTrackHandling();
        }

        function carMove() {
            // degrade spead - attrition
            carSpeed *= GROUNDSPEED_DECAY_MLT;

            if (keyHeld_Gas) {
                carSpeed += DRIVE_POWER;
            }
            if (keyHeld_Reverse) {
                carSpeed -= REVERSE_POWER;
            }
            if (keyHeld_TurnLeft) {
                carAng -= TURN_RATE;
            }
            if (keyHeld_TurnRight) {
                carAng += TURN_RATE;
            }

            // car
            carX += Math.cos(carAng) * carSpeed;
            carY += Math.sin(carAng) * carSpeed;
            //carAng += 0.02;
        }

        function carTrackHandling() {
            // car position in the grid
            var carTrackCol = Math.floor(carX / TRACK_W);
            var carTrackRow = Math.floor(carY / TRACK_H);

            // remove tracks with car
            if (carTrackCol >= 0
                && carTrackCol < TRACK_COLS
                && carTrackRow >= 0
                && carTrackRow < TRACK_ROWS) {

                // remove track and change car direction
                if (trackGrid[carTrackRow] && trackGrid[carTrackRow][carTrackCol] == TRACK_WALL) {
                    // next 2 lines added to fix bug, undoes the cr movement which got it onto the wall            
                    
                    carX -= Math.cos(carAng) * carSpeed;
                    carY -= Math.sin(carAng) * carSpeed;

                    carSpeed *= -0.5;
                } // end of track found
            } // end of valid col and row
        } // end of carTrackHandling func

        function drawInCanvas() {
            // background rectagle
            colorRect(0, 0, canvasWidth, canvasHeigth, 'black');

            // car
            if (carPicLoaded) {
                drawBitMapCenteredWithRotation(carPic, carX , carY, carAng);
            }

            drawTracks();

            // mouse position in the grid
            var mouseTrackCol = Math.floor(mouseX / TRACK_W);
            var mouseTrackRow = Math.floor(mouseY / TRACK_H);

            // print mouse position
            colorText(mouseTrackCol + "," + mouseTrackRow, mouseX, mouseY, "yellow");

            // remove track with mouse
            //if(mouseTrackCol >= 0
            //    && mouseTrackCol < TRACK_COLS
            //    && mouseTrackRow >= 0
            //    && mouseTrackRow < TRACK_ROWS) {
            //    trackGrid[mouseTrackRow][mouseTrackCol] = false;
            //}
        }

        function drawTracks() {
            // display tracks grid
            for (var rowIdx = 0; rowIdx < TRACK_ROWS; rowIdx++) {
                for (var colIdX = 0; colIdX < TRACK_COLS; colIdX++) {
                    if (trackGrid[rowIdx][colIdX] == TRACK_WALL) {
                        colorRect((TRACK_W * colIdX), (TRACK_H * rowIdx), TRACK_W - TRACK_GAP, TRACK_H - TRACK_GAP, 'red');
                    } // end of is this track visible
                } // end of for each display track
            }
        } // end of drawTracks function

        // shapes helper functions
        function drawBitMapCenteredWithRotation(useBitMap, atX, atY, withAng) {
            canvasContext.save();
            canvasContext.translate(atX, atY);
            canvasContext.rotate(withAng);
            canvasContext.drawImage(useBitMap, -useBitMap.width / 2, -useBitMap.height / 2);
            canvasContext.restore();
        }

        function colorRect(leftX, topX, width, heigth, color) {
            canvasContext.fillStyle = color;
            canvasContext.fillRect(leftX, topX, width, heigth);
        }

        function colorCircle(leftX, topX, radius, color) {
            canvasContext.fillStyle = color;
            canvasContext.beginPath();
            canvasContext.arc(leftX, topX, radius, 0, Math.PI * 2, true);
            canvasContext.fill();
        }

        function colorText(textString, textX, textY, fillColor) {
            canvasContext.fillStyle = fillColor;
            canvasContext.fillText(textString, textX, textY);
        }

    </script>
}